
repositories {
    mavenLocal()
    mavenCentral()
    maven {
        name 'TerraformersMC'
        url "https://maven.terraformersmc.com/releases"
    }
    maven {
        name "kituinMavenReleases"
        url "https://maven.kituin.fun/releases"
    }
    maven{
        name "cursemaven"
        url "https://cursemaven.com"
    }
}

ext.includeMod = { String localOverrideKey, Object dep ->
    File file = file("../.${localOverrideKey}-local");
    if (file.exists()) {
        dependencies.implementation(dep)
    } else {
        dependencies.modImplementation(dep)
    }
    dependencies.include(dep)
}
def getVersionFromFile(String f) {
    def versionFile = file(f)
    if (versionFile.exists()) {
        return versionFile.text.trim()
    } else {
        throw new Exception("Version file not found: ${versionFile.absolutePath}") as Throwable
    }
}

def code_version = getVersionFromFile('../../code_version.txt')
def mod_version = getVersionFromFile('../../version.txt')
version = mod_version + "+" + project.minecraft_version + "+fabric"
group = project.maven_group

def targetJavaVersion = project.targetJavaVersion.toInteger()
dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API. This is technically optional, but you probably want it anyway.
    // modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    includeMod "fabric-api", fabricApi.module("fabric-resource-loader-v0", project.fabric_version)
    includeMod "fabric-api", fabricApi.module("fabric-api-base", project.fabric_version)
    includeMod "fabric-api", fabricApi.module("fabric-key-binding-api-v1", project.fabric_version)
    includeMod "fabric-api", fabricApi.module("fabric-networking-api-v1", project.fabric_version)
    includeMod "fabric-api", fabricApi.module(project.command_api, project.fabric_version)
    includeMod "fabric-api", fabricApi.module("fabric-lifecycle-events-v1", project.fabric_version)
    include modImplementation("io.github.kituin:ChatImageCode:${code_version}")

    include modImplementation("io.github.kituin:ActionLib:${project.action_version}-fabric")

    modApi("com.terraformersmc:modmenu:${project.modmenu_version}") { transitive false }
}


processResources {
    inputs.property "version", project.version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

def javaVersion = JavaVersion.toVersion(targetJavaVersion)
tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release = targetJavaVersion
    }
}
java {
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    archivesBaseName = project.archives_base_name
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}
jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}
remapJar {
    destinationDirectory  = file("../../ChatImage-jar/${mod_version}")
} 
publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId project.mod_name
            groupId maven_group
            version version
            from components.java
            pom {
                name = project.mod_name
                description = 'A Minecraft Mod Which Could Show Image In Chat Line'
                url = 'https://github.com/kitUIN/ChatImage'
                licenses {
                    license {
                        name = 'MIT'
                        url = ''
                    }
                }
                developers {
                    developer {
                        id = 'kitUIN'
                        name = 'kitUIN'
                        email = 'KIT_UIN@outlook.com'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/kitUIN/ChatImage.git'
                    developerConnection = 'scm:git:ssh://github.com/kitUIN/ChatImage.git'
                    url = 'https://github.com/kitUIN/ChatImage'
                }
            }
        }
    }
    repositories {
        maven {
            name = project.mod_name
            if (project.version.toString().endsWith("-SNAPSHOT")) {
                url = "https://maven.kituin.fun/snapshots"
            } else {
                url = "https://maven.kituin.fun/releases"
            }
//            credentials(PasswordCredentials)
            credentials {
                username = findProperty("user") ?: System.getenv("KITUIN_USERNAME")
                password = findProperty("pwd") ?: System.getenv("KITUIN_PASSWORD")
            }
            authentication {
                basic(BasicAuthentication)
            }
        }
    }
}