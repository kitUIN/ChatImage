// ONLY >= neoforge-1.21.0
// RENAME build.gradle

plugins {
    id 'java-library'
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.moddev' version '2.0.78'
}

def getVersionFromFile(String f) {
    def versionFile = file(f)
    if (versionFile.exists()) {
        return versionFile.text.trim()
    } else {
        throw new Exception("Version file not found: ${versionFile.absolutePath}") as Throwable
    }
}

def code_version = getVersionFromFile('../../code_version.txt')
def mod_version = getVersionFromFile('../../version.txt')
version = mod_version + "+" + project.minecraft_version + "+neoforge"
group = mod_group_id

repositories {
    mavenLocal()
    mavenCentral()
    flatDir {
        dirs 'libs'
    }
    maven {
        url "https://mvn.cloud.alipay.com/nexus/content/repositories/open/"
    }

    maven {
        url 'https://maven.aliyun.com/nexus/content/groups/public/'
    }

    maven {
        url 'https://maven.aliyun.com/nexus/content/repositories/google'
    }
    maven {
        name "kituinMavenReleases"
        url "https://maven.kituin.fun/releases"
    }
}

base {
    archivesName = mod_name
}
javadoc {
    options.addStringOption("tag", "date:a:Date:")
    options.addStringOption("charset", "UTF-8")
    options.addStringOption("encoding", "UTF-8")
    if (JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}
// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java {
    toolchain{
        languageVersion = JavaLanguageVersion.of(project.targetJavaVersion)
    }
    withSourcesJar()
//    withJavadocJar()
}

tasks.named('jar') {
    archiveClassifier.set('')
    destinationDirectory = file("../../ChatImage-jar/${mod_version}")
}
//minecraft.accessTransformers.file rootProject.file('src/main/resources/META-INF/accesstransformer.cfg')
//minecraft.accessTransformers.entry public net.minecraft.client.Minecraft textureManager # textureManager

// Default run configurations.
// These can be tweaked, removed, or duplicated as needed.

neoForge {
    // Specify the version of NeoForge to use.
    version = project.neo_version
    // This line is optional. Access Transformers are automatically detected
    // accessTransformers.add('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            client()

            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        server {
            server()
            programArgument '--nogui'
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        // This run config launches GameTestServer and runs all registered gametests, then exits.
        // By default, the server will crash when no gametests are provided.
        // The gametest system is also enabled by default for other run configs under the /test command.
        gameTestServer {
            type = "gameTestServer"
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        data {
            clientData()

            // example of overriding the workingDirectory set in configureEach above, uncomment if you want to use it
            // gameDirectory = project.file('run-data')

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
        }

        // applies to all the run configs above
        configureEach {
            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            systemProperty 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            logLevel = org.slf4j.event.Level.DEBUG
        }
    }

    mods {
        // define mod <-> source bindings
        // these are used to tell the game which sources are for which mod
        // mostly optional in a single mod project
        // but multi mod projects should define one per mod
        "${mod_id}" {
            sourceSet(sourceSets.main)
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }


dependencies {
    // Specify the version of Minecraft to use.
    // Depending on the plugin applied there are several options. We will assume you applied the userdev plugin as shown above.
    // The group for userdev is net.neoforged, the module name is neoforge, and the version is the same as the neoforge version.
    // You can however also use the vanilla plugin (net.neoforged.gradle.vanilla) to use a version of Minecraft without the neoforge loader.
    // And its provides the option to then use net.minecraft as the group, and one of; client, server or joined as the module name, plus the game version as version.
    // For all intends and purposes: You can treat this dependency as if it is a normal library you would use.
    //    implementation "net.neoforged:neoforge:${neo_version}"

    // Example optional mod dependency with JEI
    // The JEI API is declared for compile time use, while the full JEI artifact is used at runtime
    // compileOnly "mezz.jei:jei-${mc_version}-common-api:${jei_version}"
    // compileOnly "mezz.jei:jei-${mc_version}-neoforge-api:${jei_version}"
    // We add the full version to localRuntime, not runtimeOnly, so that we do not publish a dependency on it
    // localRuntime "mezz.jei:jei-${mc_version}-neoforge:${jei_version}"

    // Example mod dependency using a mod jar from ./libs with a flat dir repository
    // This maps to ./libs/coolmod-${mc_version}-${coolmod_version}.jar
    // The group id is ignored when searching -- in this case, it is "blank"
    // implementation "blank:coolmod-${mc_version}:${coolmod_version}"

    // Example mod dependency using a file as dependency
    // implementation files("libs/coolmod-${mc_version}-${coolmod_version}.jar")
    jarJar(implementation("io.github.kituin:ChatImageCode")) {
        version {
            // The version range your mod is actually compatible with.
            // Note that you may receive a *lower* version than your preferred if another
            // Mod is only compatible up to 1.7.24, for example, your mod might get 1.7.24 at runtime.
            strictly "[${code_version},1.0)"
            prefer code_version // The version actually used in your dev workspace
        }
    }
// IF < neoforge-1.21.5
//    jarJar(implementation("io.github.kituin:ActionLib")) {
//        version {
//            // The version range your mod is actually compatible with.
//            // Note that you may receive a *lower* version than your preferred if another
//            // Mod is only compatible up to 1.7.24, for example, your mod might get 1.7.24 at runtime.
//            strictly "[${action_version}, 2.0.0-neoforge)"
//            prefer action_version // The version actually used in your dev workspace
//        }
//    }
// END IF
    // Example project dependency using a sister or child project:
    // implementation project(":myproject")

    // For more info:
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html
}

// This block of code expands all declared replace properties in the specified resource targets.
// A missing property will result in an error. Properties are expanded using ${} Groovy notation.
// When "copyIdeResources" is enabled, this will also run before the game launches in IDE environments.
// See https://docs.gradle.org/current/dsl/org.gradle.language.jvm.tasks.ProcessResources.html
var generateModMetadata = tasks.register("generateModMetadata", ProcessResources) {
    var replaceProperties = [minecraft_version      : minecraft_version,
                             minecraft_version_range: minecraft_version_range,
                             neo_version            : neo_version,
                             neo_version_range      : neo_version_range,
                             loader_version_range   : loader_version_range,
                             mod_id                 : mod_id,
                             mod_name               : mod_name,
                             mod_license            : mod_license,
                             mod_version            : version,
                             mod_authors            : mod_authors,
                             mod_description        : mod_description]
    inputs.properties replaceProperties
    expand replaceProperties
    from "src/main/templates"
    into "build/generated/sources/modMetadata"
}

// Include the output of "generateModMetadata" as an input directory for the build
// this works with both building through Gradle and the IDE.
sourceSets.main.resources.srcDir generateModMetadata
// To avoid having to run "generateModMetadata" manually, make it run on every project reload
neoForge.ideSyncTask generateModMetadata

// Example configuration to allow publishing using the maven-publish plugin
publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId project.mod_name
            groupId maven_group
            version version
//            from components.java
            artifact jar
            artifact sourcesJar
            pom {
                name = project.mod_name
                description = 'A Minecraft Mod Which Could Show Image In Chat Line'
                url = 'https://github.com/kitUIN/ChatImage'
                licenses {
                    license {
                        name = 'MIT'
                        url = ''
                    }
                }
                developers {
                    developer {
                        id = 'kitUIN'
                        name = 'kitUIN'
                        email = 'KIT_UIN@outlook.com'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/kitUIN/ChatImage.git'
                    developerConnection = 'scm:git:ssh://github.com/kitUIN/ChatImage.git'
                    url = 'https://github.com/kitUIN/ChatImage'
                }
            }
        }
    }
    repositories {
        maven {
            name = project.mod_name
            if (project.version.toString().endsWith("-SNAPSHOT")) {
                url = "https://maven.kituin.fun/snapshots"
            } else {
                url = "https://maven.kituin.fun/releases"
            }
//            credentials(PasswordCredentials)
            credentials {
                username = findProperty("user") ?: System.getenv("KITUIN_USERNAME")
                password = findProperty("pwd") ?: System.getenv("KITUIN_PASSWORD")
            }
            authentication {
                basic(BasicAuthentication)
            }
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

// IDEA no longer automatically downloads sources/javadoc jars for dependencies, so we need to explicitly enable the behavior.
idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}